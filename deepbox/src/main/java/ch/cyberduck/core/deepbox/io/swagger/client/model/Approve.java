/*
 * DeepBox
 * DeepBox API Documentation
 *
 * OpenAPI spec version: 1.0
 * Contact: info@deepcloud.swiss
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.deepbox.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * Approve
 */



public class Approve {
  @JsonProperty("targetParentNodeId")
  private String targetParentNodeId = null;

  @JsonProperty("documentType")
  private String documentType = null;

  @JsonProperty("cleanupMetaKeysExceptOf")
  private List<String> cleanupMetaKeysExceptOf = null;

  @JsonProperty("cleanupMetaBinsExceptOf")
  private List<String> cleanupMetaBinsExceptOf = null;

  public Approve targetParentNodeId(String targetParentNodeId) {
    this.targetParentNodeId = targetParentNodeId;
    return this;
  }

   /**
   * Get targetParentNodeId
   * @return targetParentNodeId
  **/
  @Schema(description = "")
  public String getTargetParentNodeId() {
    return targetParentNodeId;
  }

  public void setTargetParentNodeId(String targetParentNodeId) {
    this.targetParentNodeId = targetParentNodeId;
  }

  public Approve documentType(String documentType) {
    this.documentType = documentType;
    return this;
  }

   /**
   * Get documentType
   * @return documentType
  **/
  @Schema(description = "")
  public String getDocumentType() {
    return documentType;
  }

  public void setDocumentType(String documentType) {
    this.documentType = documentType;
  }

  public Approve cleanupMetaKeysExceptOf(List<String> cleanupMetaKeysExceptOf) {
    this.cleanupMetaKeysExceptOf = cleanupMetaKeysExceptOf;
    return this;
  }

  public Approve addCleanupMetaKeysExceptOfItem(String cleanupMetaKeysExceptOfItem) {
    if (this.cleanupMetaKeysExceptOf == null) {
      this.cleanupMetaKeysExceptOf = new ArrayList<>();
    }
    this.cleanupMetaKeysExceptOf.add(cleanupMetaKeysExceptOfItem);
    return this;
  }

   /**
   * Get cleanupMetaKeysExceptOf
   * @return cleanupMetaKeysExceptOf
  **/
  @Schema(description = "")
  public List<String> getCleanupMetaKeysExceptOf() {
    return cleanupMetaKeysExceptOf;
  }

  public void setCleanupMetaKeysExceptOf(List<String> cleanupMetaKeysExceptOf) {
    this.cleanupMetaKeysExceptOf = cleanupMetaKeysExceptOf;
  }

  public Approve cleanupMetaBinsExceptOf(List<String> cleanupMetaBinsExceptOf) {
    this.cleanupMetaBinsExceptOf = cleanupMetaBinsExceptOf;
    return this;
  }

  public Approve addCleanupMetaBinsExceptOfItem(String cleanupMetaBinsExceptOfItem) {
    if (this.cleanupMetaBinsExceptOf == null) {
      this.cleanupMetaBinsExceptOf = new ArrayList<>();
    }
    this.cleanupMetaBinsExceptOf.add(cleanupMetaBinsExceptOfItem);
    return this;
  }

   /**
   * Get cleanupMetaBinsExceptOf
   * @return cleanupMetaBinsExceptOf
  **/
  @Schema(description = "")
  public List<String> getCleanupMetaBinsExceptOf() {
    return cleanupMetaBinsExceptOf;
  }

  public void setCleanupMetaBinsExceptOf(List<String> cleanupMetaBinsExceptOf) {
    this.cleanupMetaBinsExceptOf = cleanupMetaBinsExceptOf;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Approve approve = (Approve) o;
    return Objects.equals(this.targetParentNodeId, approve.targetParentNodeId) &&
        Objects.equals(this.documentType, approve.documentType) &&
        Objects.equals(this.cleanupMetaKeysExceptOf, approve.cleanupMetaKeysExceptOf) &&
        Objects.equals(this.cleanupMetaBinsExceptOf, approve.cleanupMetaBinsExceptOf);
  }

  @Override
  public int hashCode() {
    return Objects.hash(targetParentNodeId, documentType, cleanupMetaKeysExceptOf, cleanupMetaBinsExceptOf);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Approve {\n");
    
    sb.append("    targetParentNodeId: ").append(toIndentedString(targetParentNodeId)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    cleanupMetaKeysExceptOf: ").append(toIndentedString(cleanupMetaKeysExceptOf)).append("\n");
    sb.append("    cleanupMetaBinsExceptOf: ").append(toIndentedString(cleanupMetaBinsExceptOf)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
