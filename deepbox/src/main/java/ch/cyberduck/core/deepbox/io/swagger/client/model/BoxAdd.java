/*
 * DeepBox
 * DeepBox API Documentation
 *
 * OpenAPI spec version: 1.0
 * Contact: info@deepcloud.swiss
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.deepbox.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.cyberduck.core.deepbox.io.swagger.client.model.Folder;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * BoxAdd
 */



public class BoxAdd {
  @JsonProperty("name")
  private String name = null;

  @JsonProperty("organizers")
  private List<String> organizers = null;

  @JsonProperty("addOwnersAsOrganizers")
  private Boolean addOwnersAsOrganizers = null;

  /**
   * Box Variant. null is simple box.
   */
  public enum BoxVariantEnum {
    ADVANCED("advanced"),
    ADVANCED_PER_USE("advanced-per-use");

    private String value;

    BoxVariantEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static BoxVariantEnum fromValue(String input) {
      for (BoxVariantEnum b : BoxVariantEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("boxVariant")
  private BoxVariantEnum boxVariant = BoxVariantEnum.ADVANCED;

  @JsonProperty("folders")
  private List<Folder> folders = null;

  public BoxAdd name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(required = true, description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public BoxAdd organizers(List<String> organizers) {
    this.organizers = organizers;
    return this;
  }

  public BoxAdd addOrganizersItem(String organizersItem) {
    if (this.organizers == null) {
      this.organizers = new ArrayList<>();
    }
    this.organizers.add(organizersItem);
    return this;
  }

   /**
   * Get organizers
   * @return organizers
  **/
  @Schema(description = "")
  public List<String> getOrganizers() {
    return organizers;
  }

  public void setOrganizers(List<String> organizers) {
    this.organizers = organizers;
  }

  public BoxAdd addOwnersAsOrganizers(Boolean addOwnersAsOrganizers) {
    this.addOwnersAsOrganizers = addOwnersAsOrganizers;
    return this;
  }

   /**
   * Get addOwnersAsOrganizers
   * @return addOwnersAsOrganizers
  **/
  @Schema(description = "")
  public Boolean isAddOwnersAsOrganizers() {
    return addOwnersAsOrganizers;
  }

  public void setAddOwnersAsOrganizers(Boolean addOwnersAsOrganizers) {
    this.addOwnersAsOrganizers = addOwnersAsOrganizers;
  }

  public BoxAdd boxVariant(BoxVariantEnum boxVariant) {
    this.boxVariant = boxVariant;
    return this;
  }

   /**
   * Box Variant. null is simple box.
   * @return boxVariant
  **/
  @Schema(description = "Box Variant. null is simple box.")
  public BoxVariantEnum getBoxVariant() {
    return boxVariant;
  }

  public void setBoxVariant(BoxVariantEnum boxVariant) {
    this.boxVariant = boxVariant;
  }

  public BoxAdd folders(List<Folder> folders) {
    this.folders = folders;
    return this;
  }

  public BoxAdd addFoldersItem(Folder foldersItem) {
    if (this.folders == null) {
      this.folders = new ArrayList<>();
    }
    this.folders.add(foldersItem);
    return this;
  }

   /**
   * Get folders
   * @return folders
  **/
  @Schema(description = "")
  public List<Folder> getFolders() {
    return folders;
  }

  public void setFolders(List<Folder> folders) {
    this.folders = folders;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BoxAdd boxAdd = (BoxAdd) o;
    return Objects.equals(this.name, boxAdd.name) &&
        Objects.equals(this.organizers, boxAdd.organizers) &&
        Objects.equals(this.addOwnersAsOrganizers, boxAdd.addOwnersAsOrganizers) &&
        Objects.equals(this.boxVariant, boxAdd.boxVariant) &&
        Objects.equals(this.folders, boxAdd.folders);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, organizers, addOwnersAsOrganizers, boxVariant, folders);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BoxAdd {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    organizers: ").append(toIndentedString(organizers)).append("\n");
    sb.append("    addOwnersAsOrganizers: ").append(toIndentedString(addOwnersAsOrganizers)).append("\n");
    sb.append("    boxVariant: ").append(toIndentedString(boxVariant)).append("\n");
    sb.append("    folders: ").append(toIndentedString(folders)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
