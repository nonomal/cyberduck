/*
 * DeepBox
 * DeepBox API Documentation
 *
 * OpenAPI spec version: 1.0
 * Contact: info@deepcloud.swiss
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.deepbox.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.cyberduck.core.deepbox.io.swagger.client.model.AccessData;
import ch.cyberduck.core.deepbox.io.swagger.client.model.Node;
import ch.cyberduck.core.deepbox.io.swagger.client.model.Path;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * NodeInfo
 */



public class NodeInfo {
  @JsonProperty("deepBoxNodeId")
  private String deepBoxNodeId = null;

  @JsonProperty("boxNodeId")
  private String boxNodeId = null;

  @JsonProperty("node")
  private Node node = null;

  @JsonProperty("path")
  private Path path = null;

  @JsonProperty("nodeAccessData")
  private AccessData nodeAccessData = null;

  @JsonProperty("inheritedAccessDatas")
  private Map<String, AccessData> inheritedAccessDatas = null;

  @JsonProperty("meta")
  private Map<String, String> meta = null;

  @JsonProperty("i18n")
  private Map<String, String> i18n = null;

  @JsonProperty("thumbnailUrl")
  private String thumbnailUrl = null;

  public NodeInfo deepBoxNodeId(String deepBoxNodeId) {
    this.deepBoxNodeId = deepBoxNodeId;
    return this;
  }

   /**
   * Get deepBoxNodeId
   * @return deepBoxNodeId
  **/
  @Schema(description = "")
  public String getDeepBoxNodeId() {
    return deepBoxNodeId;
  }

  public void setDeepBoxNodeId(String deepBoxNodeId) {
    this.deepBoxNodeId = deepBoxNodeId;
  }

  public NodeInfo boxNodeId(String boxNodeId) {
    this.boxNodeId = boxNodeId;
    return this;
  }

   /**
   * Get boxNodeId
   * @return boxNodeId
  **/
  @Schema(description = "")
  public String getBoxNodeId() {
    return boxNodeId;
  }

  public void setBoxNodeId(String boxNodeId) {
    this.boxNodeId = boxNodeId;
  }

  public NodeInfo node(Node node) {
    this.node = node;
    return this;
  }

   /**
   * Get node
   * @return node
  **/
  @Schema(description = "")
  public Node getNode() {
    return node;
  }

  public void setNode(Node node) {
    this.node = node;
  }

  public NodeInfo path(Path path) {
    this.path = path;
    return this;
  }

   /**
   * Get path
   * @return path
  **/
  @Schema(description = "")
  public Path getPath() {
    return path;
  }

  public void setPath(Path path) {
    this.path = path;
  }

  public NodeInfo nodeAccessData(AccessData nodeAccessData) {
    this.nodeAccessData = nodeAccessData;
    return this;
  }

   /**
   * Get nodeAccessData
   * @return nodeAccessData
  **/
  @Schema(description = "")
  public AccessData getNodeAccessData() {
    return nodeAccessData;
  }

  public void setNodeAccessData(AccessData nodeAccessData) {
    this.nodeAccessData = nodeAccessData;
  }

  public NodeInfo inheritedAccessDatas(Map<String, AccessData> inheritedAccessDatas) {
    this.inheritedAccessDatas = inheritedAccessDatas;
    return this;
  }

  public NodeInfo putInheritedAccessDatasItem(String key, AccessData inheritedAccessDatasItem) {
    if (this.inheritedAccessDatas == null) {
      this.inheritedAccessDatas = new HashMap<>();
    }
    this.inheritedAccessDatas.put(key, inheritedAccessDatasItem);
    return this;
  }

   /**
   * Get inheritedAccessDatas
   * @return inheritedAccessDatas
  **/
  @Schema(description = "")
  public Map<String, AccessData> getInheritedAccessDatas() {
    return inheritedAccessDatas;
  }

  public void setInheritedAccessDatas(Map<String, AccessData> inheritedAccessDatas) {
    this.inheritedAccessDatas = inheritedAccessDatas;
  }

  public NodeInfo meta(Map<String, String> meta) {
    this.meta = meta;
    return this;
  }

  public NodeInfo putMetaItem(String key, String metaItem) {
    if (this.meta == null) {
      this.meta = new HashMap<>();
    }
    this.meta.put(key, metaItem);
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @Schema(description = "")
  public Map<String, String> getMeta() {
    return meta;
  }

  public void setMeta(Map<String, String> meta) {
    this.meta = meta;
  }

  public NodeInfo i18n(Map<String, String> i18n) {
    this.i18n = i18n;
    return this;
  }

  public NodeInfo putI18nItem(String key, String i18nItem) {
    if (this.i18n == null) {
      this.i18n = new HashMap<>();
    }
    this.i18n.put(key, i18nItem);
    return this;
  }

   /**
   * Get i18n
   * @return i18n
  **/
  @Schema(description = "")
  public Map<String, String> getI18n() {
    return i18n;
  }

  public void setI18n(Map<String, String> i18n) {
    this.i18n = i18n;
  }

  public NodeInfo thumbnailUrl(String thumbnailUrl) {
    this.thumbnailUrl = thumbnailUrl;
    return this;
  }

   /**
   * Get thumbnailUrl
   * @return thumbnailUrl
  **/
  @Schema(description = "")
  public String getThumbnailUrl() {
    return thumbnailUrl;
  }

  public void setThumbnailUrl(String thumbnailUrl) {
    this.thumbnailUrl = thumbnailUrl;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NodeInfo nodeInfo = (NodeInfo) o;
    return Objects.equals(this.deepBoxNodeId, nodeInfo.deepBoxNodeId) &&
        Objects.equals(this.boxNodeId, nodeInfo.boxNodeId) &&
        Objects.equals(this.node, nodeInfo.node) &&
        Objects.equals(this.path, nodeInfo.path) &&
        Objects.equals(this.nodeAccessData, nodeInfo.nodeAccessData) &&
        Objects.equals(this.inheritedAccessDatas, nodeInfo.inheritedAccessDatas) &&
        Objects.equals(this.meta, nodeInfo.meta) &&
        Objects.equals(this.i18n, nodeInfo.i18n) &&
        Objects.equals(this.thumbnailUrl, nodeInfo.thumbnailUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deepBoxNodeId, boxNodeId, node, path, nodeAccessData, inheritedAccessDatas, meta, i18n, thumbnailUrl);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NodeInfo {\n");
    
    sb.append("    deepBoxNodeId: ").append(toIndentedString(deepBoxNodeId)).append("\n");
    sb.append("    boxNodeId: ").append(toIndentedString(boxNodeId)).append("\n");
    sb.append("    node: ").append(toIndentedString(node)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    nodeAccessData: ").append(toIndentedString(nodeAccessData)).append("\n");
    sb.append("    inheritedAccessDatas: ").append(toIndentedString(inheritedAccessDatas)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    i18n: ").append(toIndentedString(i18n)).append("\n");
    sb.append("    thumbnailUrl: ").append(toIndentedString(thumbnailUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
