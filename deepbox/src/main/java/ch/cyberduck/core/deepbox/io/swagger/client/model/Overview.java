/*
 * DeepBox
 * DeepBox API Documentation
 *
 * OpenAPI spec version: 1.0
 * Contact: info@deepcloud.swiss
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.deepbox.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.cyberduck.core.deepbox.io.swagger.client.model.CompanyEntry;
import ch.cyberduck.core.deepbox.io.swagger.client.model.DateOverview;
import ch.cyberduck.core.deepbox.io.swagger.client.model.DeepBoxOverview;
import ch.cyberduck.core.deepbox.io.swagger.client.model.FavoriteOverview;
import ch.cyberduck.core.deepbox.io.swagger.client.model.QueueOverview;
import ch.cyberduck.core.deepbox.io.swagger.client.model.RecentOverview;
import ch.cyberduck.core.deepbox.io.swagger.client.model.SharedWithMeOverview;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * Overview
 */



public class Overview {
  @JsonProperty("company")
  private CompanyEntry company = null;

  @JsonProperty("canOnboard")
  private Boolean canOnboard = null;

  @JsonProperty("deepBoxes")
  private List<DeepBoxOverview> deepBoxes = null;

  @JsonProperty("favorites")
  private FavoriteOverview favorites = null;

  @JsonProperty("recents")
  private RecentOverview recents = null;

  @JsonProperty("queues")
  private QueueOverview queues = null;

  @JsonProperty("sharedWithMe")
  private SharedWithMeOverview sharedWithMe = null;

  @JsonProperty("deadlines")
  private DateOverview deadlines = null;

  public Overview company(CompanyEntry company) {
    this.company = company;
    return this;
  }

   /**
   * Get company
   * @return company
  **/
  @Schema(description = "")
  public CompanyEntry getCompany() {
    return company;
  }

  public void setCompany(CompanyEntry company) {
    this.company = company;
  }

  public Overview canOnboard(Boolean canOnboard) {
    this.canOnboard = canOnboard;
    return this;
  }

   /**
   * Get canOnboard
   * @return canOnboard
  **/
  @Schema(description = "")
  public Boolean isCanOnboard() {
    return canOnboard;
  }

  public void setCanOnboard(Boolean canOnboard) {
    this.canOnboard = canOnboard;
  }

  public Overview deepBoxes(List<DeepBoxOverview> deepBoxes) {
    this.deepBoxes = deepBoxes;
    return this;
  }

  public Overview addDeepBoxesItem(DeepBoxOverview deepBoxesItem) {
    if (this.deepBoxes == null) {
      this.deepBoxes = new ArrayList<>();
    }
    this.deepBoxes.add(deepBoxesItem);
    return this;
  }

   /**
   * Get deepBoxes
   * @return deepBoxes
  **/
  @Schema(description = "")
  public List<DeepBoxOverview> getDeepBoxes() {
    return deepBoxes;
  }

  public void setDeepBoxes(List<DeepBoxOverview> deepBoxes) {
    this.deepBoxes = deepBoxes;
  }

  public Overview favorites(FavoriteOverview favorites) {
    this.favorites = favorites;
    return this;
  }

   /**
   * Get favorites
   * @return favorites
  **/
  @Schema(description = "")
  public FavoriteOverview getFavorites() {
    return favorites;
  }

  public void setFavorites(FavoriteOverview favorites) {
    this.favorites = favorites;
  }

  public Overview recents(RecentOverview recents) {
    this.recents = recents;
    return this;
  }

   /**
   * Get recents
   * @return recents
  **/
  @Schema(description = "")
  public RecentOverview getRecents() {
    return recents;
  }

  public void setRecents(RecentOverview recents) {
    this.recents = recents;
  }

  public Overview queues(QueueOverview queues) {
    this.queues = queues;
    return this;
  }

   /**
   * Get queues
   * @return queues
  **/
  @Schema(description = "")
  public QueueOverview getQueues() {
    return queues;
  }

  public void setQueues(QueueOverview queues) {
    this.queues = queues;
  }

  public Overview sharedWithMe(SharedWithMeOverview sharedWithMe) {
    this.sharedWithMe = sharedWithMe;
    return this;
  }

   /**
   * Get sharedWithMe
   * @return sharedWithMe
  **/
  @Schema(description = "")
  public SharedWithMeOverview getSharedWithMe() {
    return sharedWithMe;
  }

  public void setSharedWithMe(SharedWithMeOverview sharedWithMe) {
    this.sharedWithMe = sharedWithMe;
  }

  public Overview deadlines(DateOverview deadlines) {
    this.deadlines = deadlines;
    return this;
  }

   /**
   * Get deadlines
   * @return deadlines
  **/
  @Schema(description = "")
  public DateOverview getDeadlines() {
    return deadlines;
  }

  public void setDeadlines(DateOverview deadlines) {
    this.deadlines = deadlines;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Overview overview = (Overview) o;
    return Objects.equals(this.company, overview.company) &&
        Objects.equals(this.canOnboard, overview.canOnboard) &&
        Objects.equals(this.deepBoxes, overview.deepBoxes) &&
        Objects.equals(this.favorites, overview.favorites) &&
        Objects.equals(this.recents, overview.recents) &&
        Objects.equals(this.queues, overview.queues) &&
        Objects.equals(this.sharedWithMe, overview.sharedWithMe) &&
        Objects.equals(this.deadlines, overview.deadlines);
  }

  @Override
  public int hashCode() {
    return Objects.hash(company, canOnboard, deepBoxes, favorites, recents, queues, sharedWithMe, deadlines);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Overview {\n");
    
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    canOnboard: ").append(toIndentedString(canOnboard)).append("\n");
    sb.append("    deepBoxes: ").append(toIndentedString(deepBoxes)).append("\n");
    sb.append("    favorites: ").append(toIndentedString(favorites)).append("\n");
    sb.append("    recents: ").append(toIndentedString(recents)).append("\n");
    sb.append("    queues: ").append(toIndentedString(queues)).append("\n");
    sb.append("    sharedWithMe: ").append(toIndentedString(sharedWithMe)).append("\n");
    sb.append("    deadlines: ").append(toIndentedString(deadlines)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
