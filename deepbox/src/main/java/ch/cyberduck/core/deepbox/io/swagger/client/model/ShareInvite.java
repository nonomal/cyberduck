/*
 * DeepBox
 * DeepBox API Documentation
 *
 * OpenAPI spec version: 1.0
 * Contact: info@deepcloud.swiss
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.deepbox.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.cyberduck.core.deepbox.io.swagger.client.model.SharedNode;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * ShareInvite
 */



public class ShareInvite {
  @JsonProperty("email")
  private String email = null;

  @JsonProperty("text")
  private String text = null;

  @JsonProperty("language")
  private String language = null;

  /**
   * Gets or Sets callbackEventTypes
   */
  public enum CallbackEventTypesEnum {
    SHARE_INVITE_ACCEPTED("share-invite-accepted");

    private String value;

    CallbackEventTypesEnum(String value) {
      this.value = value;
    }
    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    @JsonCreator
    public static CallbackEventTypesEnum fromValue(String input) {
      for (CallbackEventTypesEnum b : CallbackEventTypesEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }

  }  @JsonProperty("callbackEventTypes")
  private List<CallbackEventTypesEnum> callbackEventTypes = null;

  @JsonProperty("callbackUrl")
  private String callbackUrl = null;

  @JsonProperty("callbackSecret")
  private String callbackSecret = null;

  @JsonProperty("sharedNodes")
  private List<SharedNode> sharedNodes = new ArrayList<>();

  public ShareInvite email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @Schema(required = true, description = "")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public ShareInvite text(String text) {
    this.text = text;
    return this;
  }

   /**
   * Get text
   * @return text
  **/
  @Schema(description = "")
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public ShareInvite language(String language) {
    this.language = language;
    return this;
  }

   /**
   * Get language
   * @return language
  **/
  @Schema(description = "")
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }

  public ShareInvite callbackEventTypes(List<CallbackEventTypesEnum> callbackEventTypes) {
    this.callbackEventTypes = callbackEventTypes;
    return this;
  }

  public ShareInvite addCallbackEventTypesItem(CallbackEventTypesEnum callbackEventTypesItem) {
    if (this.callbackEventTypes == null) {
      this.callbackEventTypes = new ArrayList<>();
    }
    this.callbackEventTypes.add(callbackEventTypesItem);
    return this;
  }

   /**
   * Get callbackEventTypes
   * @return callbackEventTypes
  **/
  @Schema(description = "")
  public List<CallbackEventTypesEnum> getCallbackEventTypes() {
    return callbackEventTypes;
  }

  public void setCallbackEventTypes(List<CallbackEventTypesEnum> callbackEventTypes) {
    this.callbackEventTypes = callbackEventTypes;
  }

  public ShareInvite callbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
    return this;
  }

   /**
   * POST callback url. For body see schema CallbackInfo
   * @return callbackUrl
  **/
  @Schema(example = "https://myserver.com/my/lovely/callback", description = "POST callback url. For body see schema CallbackInfo")
  public String getCallbackUrl() {
    return callbackUrl;
  }

  public void setCallbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
  }

  public ShareInvite callbackSecret(String callbackSecret) {
    this.callbackSecret = callbackSecret;
    return this;
  }

   /**
   * Secret to calculate auth signature of the body (SHA-256 HMAC). Send in header as X-DeepBox-Signature-256
   * @return callbackSecret
  **/
  @Schema(description = "Secret to calculate auth signature of the body (SHA-256 HMAC). Send in header as X-DeepBox-Signature-256")
  public String getCallbackSecret() {
    return callbackSecret;
  }

  public void setCallbackSecret(String callbackSecret) {
    this.callbackSecret = callbackSecret;
  }

  public ShareInvite sharedNodes(List<SharedNode> sharedNodes) {
    this.sharedNodes = sharedNodes;
    return this;
  }

  public ShareInvite addSharedNodesItem(SharedNode sharedNodesItem) {
    this.sharedNodes.add(sharedNodesItem);
    return this;
  }

   /**
   * Get sharedNodes
   * @return sharedNodes
  **/
  @Schema(required = true, description = "")
  public List<SharedNode> getSharedNodes() {
    return sharedNodes;
  }

  public void setSharedNodes(List<SharedNode> sharedNodes) {
    this.sharedNodes = sharedNodes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShareInvite shareInvite = (ShareInvite) o;
    return Objects.equals(this.email, shareInvite.email) &&
        Objects.equals(this.text, shareInvite.text) &&
        Objects.equals(this.language, shareInvite.language) &&
        Objects.equals(this.callbackEventTypes, shareInvite.callbackEventTypes) &&
        Objects.equals(this.callbackUrl, shareInvite.callbackUrl) &&
        Objects.equals(this.callbackSecret, shareInvite.callbackSecret) &&
        Objects.equals(this.sharedNodes, shareInvite.sharedNodes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, text, language, callbackEventTypes, callbackUrl, callbackSecret, sharedNodes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShareInvite {\n");
    
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    callbackEventTypes: ").append(toIndentedString(callbackEventTypes)).append("\n");
    sb.append("    callbackUrl: ").append(toIndentedString(callbackUrl)).append("\n");
    sb.append("    callbackSecret: ").append(toIndentedString(callbackSecret)).append("\n");
    sb.append("    sharedNodes: ").append(toIndentedString(sharedNodes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
