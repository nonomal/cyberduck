/*
 * DeepAdmin API
 * General API for DeepCloud Admin / Subscription Service
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@deepcloud.swiss
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.deepcloud.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.cyberduck.core.deepcloud.io.swagger.client.model.InvitationCategoryEnum;
import ch.cyberduck.core.deepcloud.io.swagger.client.model.InvitationPermission;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.joda.time.DateTime;
/**
 * Invitation
 */



public class Invitation {
  @JsonProperty("id")
  private Integer id = null;

  @JsonProperty("category")
  private InvitationCategoryEnum category = null;

  @JsonProperty("recipient")
  private String recipient = null;

  @JsonProperty("expiry_date")
  private DateTime expiryDate = null;

  @JsonProperty("max_uses")
  private Integer maxUses = null;

  @JsonProperty("current_uses")
  private Integer currentUses = null;

  @JsonProperty("creator_id")
  private Integer creatorId = null;

  @JsonProperty("is_valid")
  private Boolean isValid = null;

  @JsonProperty("link")
  private String link = null;

  @JsonProperty("permissions")
  private List<InvitationPermission> permissions = new ArrayList<>();

  @JsonProperty("shadow_user")
  private String shadowUser = null;

   /**
   * Get id
   * @return id
  **/
  @Schema(required = true, description = "")
  public Integer getId() {
    return id;
  }

  public Invitation category(InvitationCategoryEnum category) {
    this.category = category;
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @Schema(required = true, description = "")
  public InvitationCategoryEnum getCategory() {
    return category;
  }

  public void setCategory(InvitationCategoryEnum category) {
    this.category = category;
  }

  public Invitation recipient(String recipient) {
    this.recipient = recipient;
    return this;
  }

   /**
   * Recipient should correspond to the chosen category. Eg.: \&quot;john@mycompany.ch\&quot; for email, \&quot;mycompany.ch\&quot; for domain. Can be left blank for anonymous.
   * @return recipient
  **/
  @Schema(description = "Recipient should correspond to the chosen category. Eg.: \"john@mycompany.ch\" for email, \"mycompany.ch\" for domain. Can be left blank for anonymous.")
  public String getRecipient() {
    return recipient;
  }

  public void setRecipient(String recipient) {
    this.recipient = recipient;
  }

  public Invitation expiryDate(DateTime expiryDate) {
    this.expiryDate = expiryDate;
    return this;
  }

   /**
   * Get expiryDate
   * @return expiryDate
  **/
  @Schema(description = "")
  public DateTime getExpiryDate() {
    return expiryDate;
  }

  public void setExpiryDate(DateTime expiryDate) {
    this.expiryDate = expiryDate;
  }

  public Invitation maxUses(Integer maxUses) {
    this.maxUses = maxUses;
    return this;
  }

   /**
   * Get maxUses
   * minimum: -2147483648
   * maximum: 2147483647
   * @return maxUses
  **/
  @Schema(description = "")
  public Integer getMaxUses() {
    return maxUses;
  }

  public void setMaxUses(Integer maxUses) {
    this.maxUses = maxUses;
  }

   /**
   * Get currentUses
   * @return currentUses
  **/
  @Schema(required = true, description = "")
  public Integer getCurrentUses() {
    return currentUses;
  }

   /**
   * Get creatorId
   * @return creatorId
  **/
  @Schema(required = true, description = "")
  public Integer getCreatorId() {
    return creatorId;
  }

   /**
   * Get isValid
   * @return isValid
  **/
  @Schema(required = true, description = "")
  public Boolean isIsValid() {
    return isValid;
  }

   /**
   * Get link
   * @return link
  **/
  @Schema(required = true, description = "")
  public String getLink() {
    return link;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @Schema(required = true, description = "")
  public List<InvitationPermission> getPermissions() {
    return permissions;
  }

   /**
   * Get shadowUser
   * @return shadowUser
  **/
  @Schema(required = true, description = "")
  public String getShadowUser() {
    return shadowUser;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Invitation invitation = (Invitation) o;
    return Objects.equals(this.id, invitation.id) &&
        Objects.equals(this.category, invitation.category) &&
        Objects.equals(this.recipient, invitation.recipient) &&
        Objects.equals(this.expiryDate, invitation.expiryDate) &&
        Objects.equals(this.maxUses, invitation.maxUses) &&
        Objects.equals(this.currentUses, invitation.currentUses) &&
        Objects.equals(this.creatorId, invitation.creatorId) &&
        Objects.equals(this.isValid, invitation.isValid) &&
        Objects.equals(this.link, invitation.link) &&
        Objects.equals(this.permissions, invitation.permissions) &&
        Objects.equals(this.shadowUser, invitation.shadowUser);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, category, recipient, expiryDate, maxUses, currentUses, creatorId, isValid, link, permissions, shadowUser);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Invitation {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    maxUses: ").append(toIndentedString(maxUses)).append("\n");
    sb.append("    currentUses: ").append(toIndentedString(currentUses)).append("\n");
    sb.append("    creatorId: ").append(toIndentedString(creatorId)).append("\n");
    sb.append("    isValid: ").append(toIndentedString(isValid)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    shadowUser: ").append(toIndentedString(shadowUser)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
