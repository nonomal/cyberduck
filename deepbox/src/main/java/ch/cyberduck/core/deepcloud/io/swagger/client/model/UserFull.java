/*
 * DeepAdmin API
 * General API for DeepCloud Admin / Subscription Service
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@deepcloud.swiss
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.deepcloud.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import ch.cyberduck.core.deepcloud.io.swagger.client.model.CompanyRoles;
import ch.cyberduck.core.deepcloud.io.swagger.client.model.GroupRoles;
import ch.cyberduck.core.deepcloud.io.swagger.client.model.Invitation;
import ch.cyberduck.core.deepcloud.io.swagger.client.model.UnitRoles;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * UserFull
 */



public class UserFull {
  @JsonProperty("email")
  private String email = null;

  @JsonProperty("firstname")
  private String firstname = null;

  @JsonProperty("lastname")
  private String lastname = null;

  @JsonProperty("id")
  private String id = null;

  @JsonProperty("groups")
  private List<GroupRoles> groups = new ArrayList<>();

  @JsonProperty("companies")
  private List<CompanyRoles> companies = new ArrayList<>();

  @JsonProperty("units")
  private List<UnitRoles> units = new ArrayList<>();

  @JsonProperty("pending")
  private Boolean pending = null;

  @JsonProperty("pending_invitations")
  private List<Invitation> pendingInvitations = new ArrayList<>();

  @JsonProperty("lang")
  private String lang = null;

  @JsonProperty("display_name")
  private String displayName = null;

  public UserFull email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @Schema(required = true, description = "")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public UserFull firstname(String firstname) {
    this.firstname = firstname;
    return this;
  }

   /**
   * Get firstname
   * @return firstname
  **/
  @Schema(description = "")
  public String getFirstname() {
    return firstname;
  }

  public void setFirstname(String firstname) {
    this.firstname = firstname;
  }

  public UserFull lastname(String lastname) {
    this.lastname = lastname;
    return this;
  }

   /**
   * Get lastname
   * @return lastname
  **/
  @Schema(description = "")
  public String getLastname() {
    return lastname;
  }

  public void setLastname(String lastname) {
    this.lastname = lastname;
  }

  public UserFull id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @Schema(required = true, description = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

   /**
   * Get groups
   * @return groups
  **/
  @Schema(required = true, description = "")
  public List<GroupRoles> getGroups() {
    return groups;
  }

   /**
   * Get companies
   * @return companies
  **/
  @Schema(required = true, description = "")
  public List<CompanyRoles> getCompanies() {
    return companies;
  }

   /**
   * Get units
   * @return units
  **/
  @Schema(required = true, description = "")
  public List<UnitRoles> getUnits() {
    return units;
  }

   /**
   * Get pending
   * @return pending
  **/
  @Schema(required = true, description = "")
  public Boolean isPending() {
    return pending;
  }

   /**
   * Get pendingInvitations
   * @return pendingInvitations
  **/
  @Schema(required = true, description = "")
  public List<Invitation> getPendingInvitations() {
    return pendingInvitations;
  }

   /**
   * Get lang
   * @return lang
  **/
  @Schema(required = true, description = "")
  public String getLang() {
    return lang;
  }

   /**
   * Get displayName
   * @return displayName
  **/
  @Schema(required = true, description = "")
  public String getDisplayName() {
    return displayName;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserFull userFull = (UserFull) o;
    return Objects.equals(this.email, userFull.email) &&
        Objects.equals(this.firstname, userFull.firstname) &&
        Objects.equals(this.lastname, userFull.lastname) &&
        Objects.equals(this.id, userFull.id) &&
        Objects.equals(this.groups, userFull.groups) &&
        Objects.equals(this.companies, userFull.companies) &&
        Objects.equals(this.units, userFull.units) &&
        Objects.equals(this.pending, userFull.pending) &&
        Objects.equals(this.pendingInvitations, userFull.pendingInvitations) &&
        Objects.equals(this.lang, userFull.lang) &&
        Objects.equals(this.displayName, userFull.displayName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, firstname, lastname, id, groups, companies, units, pending, pendingInvitations, lang, displayName);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserFull {\n");
    
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstname: ").append(toIndentedString(firstname)).append("\n");
    sb.append("    lastname: ").append(toIndentedString(lastname)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    companies: ").append(toIndentedString(companies)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
    sb.append("    pendingInvitations: ").append(toIndentedString(pendingInvitations)).append("\n");
    sb.append("    lang: ").append(toIndentedString(lang)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
