/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * OpenAPI spec version: 4.45.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package ch.cyberduck.core.sds.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
/**
 * Audit node info
 */
@Schema(description = "Audit node info")

public class AuditNodeInfo {
  @JsonProperty("nodeId")
  private Long nodeId = null;

  @JsonProperty("nodeName")
  private String nodeName = null;

  @JsonProperty("nodeParentPath")
  private String nodeParentPath = null;

  @JsonProperty("nodeParentId")
  private Long nodeParentId = null;

  @JsonProperty("nodeIsEncrypted")
  private Boolean nodeIsEncrypted = null;

  @JsonProperty("countChildren")
  private Long countChildren = null;

  public AuditNodeInfo nodeId(Long nodeId) {
    this.nodeId = nodeId;
    return this;
  }

   /**
   * Node ID
   * @return nodeId
  **/
  @Schema(required = true, description = "Node ID")
  public Long getNodeId() {
    return nodeId;
  }

  public void setNodeId(Long nodeId) {
    this.nodeId = nodeId;
  }

  public AuditNodeInfo nodeName(String nodeName) {
    this.nodeName = nodeName;
    return this;
  }

   /**
   * Node name
   * @return nodeName
  **/
  @Schema(required = true, description = "Node name")
  public String getNodeName() {
    return nodeName;
  }

  public void setNodeName(String nodeName) {
    this.nodeName = nodeName;
  }

  public AuditNodeInfo nodeParentPath(String nodeParentPath) {
    this.nodeParentPath = nodeParentPath;
    return this;
  }

   /**
   * Parent node path  &#x60;/&#x60; if node is a root node (room)
   * @return nodeParentPath
  **/
  @Schema(required = true, description = "Parent node path  `/` if node is a root node (room)")
  public String getNodeParentPath() {
    return nodeParentPath;
  }

  public void setNodeParentPath(String nodeParentPath) {
    this.nodeParentPath = nodeParentPath;
  }

  public AuditNodeInfo nodeParentId(Long nodeParentId) {
    this.nodeParentId = nodeParentId;
    return this;
  }

   /**
   * Parent room ID
   * @return nodeParentId
  **/
  @Schema(description = "Parent room ID")
  public Long getNodeParentId() {
    return nodeParentId;
  }

  public void setNodeParentId(Long nodeParentId) {
    this.nodeParentId = nodeParentId;
  }

  public AuditNodeInfo nodeIsEncrypted(Boolean nodeIsEncrypted) {
    this.nodeIsEncrypted = nodeIsEncrypted;
    return this;
  }

   /**
   * Encryption state
   * @return nodeIsEncrypted
  **/
  @Schema(description = "Encryption state")
  public Boolean isNodeIsEncrypted() {
    return nodeIsEncrypted;
  }

  public void setNodeIsEncrypted(Boolean nodeIsEncrypted) {
    this.nodeIsEncrypted = nodeIsEncrypted;
  }

  public AuditNodeInfo countChildren(Long countChildren) {
    this.countChildren = countChildren;
    return this;
  }

   /**
   * Number of direct children  (no recursion; for rooms only)
   * @return countChildren
  **/
  @Schema(description = "Number of direct children  (no recursion; for rooms only)")
  public Long getCountChildren() {
    return countChildren;
  }

  public void setCountChildren(Long countChildren) {
    this.countChildren = countChildren;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuditNodeInfo auditNodeInfo = (AuditNodeInfo) o;
    return Objects.equals(this.nodeId, auditNodeInfo.nodeId) &&
        Objects.equals(this.nodeName, auditNodeInfo.nodeName) &&
        Objects.equals(this.nodeParentPath, auditNodeInfo.nodeParentPath) &&
        Objects.equals(this.nodeParentId, auditNodeInfo.nodeParentId) &&
        Objects.equals(this.nodeIsEncrypted, auditNodeInfo.nodeIsEncrypted) &&
        Objects.equals(this.countChildren, auditNodeInfo.countChildren);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nodeId, nodeName, nodeParentPath, nodeParentId, nodeIsEncrypted, countChildren);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuditNodeInfo {\n");
    
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    nodeName: ").append(toIndentedString(nodeName)).append("\n");
    sb.append("    nodeParentPath: ").append(toIndentedString(nodeParentPath)).append("\n");
    sb.append("    nodeParentId: ").append(toIndentedString(nodeParentId)).append("\n");
    sb.append("    nodeIsEncrypted: ").append(toIndentedString(nodeIsEncrypted)).append("\n");
    sb.append("    countChildren: ").append(toIndentedString(countChildren)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
