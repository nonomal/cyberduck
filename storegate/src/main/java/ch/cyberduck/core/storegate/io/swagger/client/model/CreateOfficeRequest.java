/*
 * Storegate api v4.2
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v4.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ch.cyberduck.core.storegate.io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * A CreateFolderRequest object
 */
@ApiModel(description = "A CreateFolderRequest object")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2023-08-24T11:36:23.792+02:00")
public class CreateOfficeRequest {
  @JsonProperty("parentID")
  private String parentID = null;

  @JsonProperty("name")
  private String name = null;

  @JsonProperty("officeType")
  private Integer officeType = null;

  @JsonProperty("isLocal")
  private Boolean isLocal = null;

  public CreateOfficeRequest parentID(String parentID) {
    this.parentID = parentID;
    return this;
  }

   /**
   * The id of the folder to create the folder in
   * @return parentID
  **/
  @ApiModelProperty(value = "The id of the folder to create the folder in")
  public String getParentID() {
    return parentID;
  }

  public void setParentID(String parentID) {
    this.parentID = parentID;
  }

  public CreateOfficeRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The new office file name
   * @return name
  **/
  @ApiModelProperty(value = "The new office file name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public CreateOfficeRequest officeType(Integer officeType) {
    this.officeType = officeType;
    return this;
  }

   /**
   * Type of file (0 &#x3D; Word, 1 &#x3D; Powerpoint, 2 &#x3D; Excel)
   * @return officeType
  **/
  @ApiModelProperty(value = "Type of file (0 = Word, 1 = Powerpoint, 2 = Excel)")
  public Integer getOfficeType() {
    return officeType;
  }

  public void setOfficeType(Integer officeType) {
    this.officeType = officeType;
  }

  public CreateOfficeRequest isLocal(Boolean isLocal) {
    this.isLocal = isLocal;
    return this;
  }

   /**
   * Webdav (true) or Wopi (false)
   * @return isLocal
  **/
  @ApiModelProperty(value = "Webdav (true) or Wopi (false)")
  public Boolean isIsLocal() {
    return isLocal;
  }

  public void setIsLocal(Boolean isLocal) {
    this.isLocal = isLocal;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateOfficeRequest createOfficeRequest = (CreateOfficeRequest) o;
    return Objects.equals(this.parentID, createOfficeRequest.parentID) &&
        Objects.equals(this.name, createOfficeRequest.name) &&
        Objects.equals(this.officeType, createOfficeRequest.officeType) &&
        Objects.equals(this.isLocal, createOfficeRequest.isLocal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(parentID, name, officeType, isLocal);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateOfficeRequest {\n");
    
    sb.append("    parentID: ").append(toIndentedString(parentID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    officeType: ").append(toIndentedString(officeType)).append("\n");
    sb.append("    isLocal: ").append(toIndentedString(isLocal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

